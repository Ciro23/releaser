// Mocks generated by Mockito 5.4.4 from annotations
// in releaser/test/router/menu_router_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i10;

import 'package:archive/src/archive_file.dart' as _i11;
import 'package:archive/src/io/zip_file_encoder.dart' as _i9;
import 'package:args/command_runner.dart' as _i7;
import 'package:args/src/arg_parser.dart' as _i3;
import 'package:args/src/arg_results.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:releaser/software/software.dart' as _i2;
import 'package:releaser/software/software_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSoftware_0 extends _i1.SmartFake implements _i2.Software {
  _FakeSoftware_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArgParser_1 extends _i1.SmartFake implements _i3.ArgParser {
  _FakeArgParser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArgResults_2 extends _i1.SmartFake implements _i4.ArgResults {
  _FakeArgResults_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SoftwareService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoftwareService extends _i1.Mock implements _i5.SoftwareService {
  @override
  _i6.Future<_i2.Software> save(_i2.Software? software) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [software],
        ),
        returnValue: _i6.Future<_i2.Software>.value(_FakeSoftware_0(
          this,
          Invocation.method(
            #save,
            [software],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Software>.value(_FakeSoftware_0(
          this,
          Invocation.method(
            #save,
            [software],
          ),
        )),
      ) as _i6.Future<_i2.Software>);

  @override
  _i6.Future<List<_i2.Software>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Software>>.value(<_i2.Software>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i2.Software>>.value(<_i2.Software>[]),
      ) as _i6.Future<List<_i2.Software>>);

  @override
  _i6.Future<_i2.Software?> findByName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #findByName,
          [name],
        ),
        returnValue: _i6.Future<_i2.Software?>.value(),
        returnValueForMissingStub: _i6.Future<_i2.Software?>.value(),
      ) as _i6.Future<_i2.Software?>);

  @override
  _i6.Future<_i2.Software?> findByNameForVersion(
    String? name, {
    required String? version,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByNameForVersion,
          [name],
          {#version: version},
        ),
        returnValue: _i6.Future<_i2.Software?>.value(),
        returnValueForMissingStub: _i6.Future<_i2.Software?>.value(),
      ) as _i6.Future<_i2.Software?>);
}

/// A class which mocks [CommandRunner].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandRunner extends _i1.Mock implements _i7.CommandRunner<void> {
  @override
  String get executableName => (super.noSuchMethod(
        Invocation.getter(#executableName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#executableName),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#executableName),
        ),
      ) as String);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  int get suggestionDistanceLimit => (super.noSuchMethod(
        Invocation.getter(#suggestionDistanceLimit),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get invocation => (super.noSuchMethod(
        Invocation.getter(#invocation),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#invocation),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#invocation),
        ),
      ) as String);

  @override
  String get usage => (super.noSuchMethod(
        Invocation.getter(#usage),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#usage),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#usage),
        ),
      ) as String);

  @override
  Map<String, _i7.Command<void>> get commands => (super.noSuchMethod(
        Invocation.getter(#commands),
        returnValue: <String, _i7.Command<void>>{},
        returnValueForMissingStub: <String, _i7.Command<void>>{},
      ) as Map<String, _i7.Command<void>>);

  @override
  _i3.ArgParser get argParser => (super.noSuchMethod(
        Invocation.getter(#argParser),
        returnValue: _FakeArgParser_1(
          this,
          Invocation.getter(#argParser),
        ),
        returnValueForMissingStub: _FakeArgParser_1(
          this,
          Invocation.getter(#argParser),
        ),
      ) as _i3.ArgParser);

  @override
  void printUsage() => super.noSuchMethod(
        Invocation.method(
          #printUsage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Never usageException(String? message) => (super.noSuchMethod(
        Invocation.method(
          #usageException,
          [message],
        ),
        returnValue: null,
        returnValueForMissingStub: null,
      ) as Never);

  @override
  void addCommand(_i7.Command<void>? command) => super.noSuchMethod(
        Invocation.method(
          #addCommand,
          [command],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> run(Iterable<String>? args) => (super.noSuchMethod(
        Invocation.method(
          #run,
          [args],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i4.ArgResults parse(Iterable<String>? args) => (super.noSuchMethod(
        Invocation.method(
          #parse,
          [args],
        ),
        returnValue: _FakeArgResults_2(
          this,
          Invocation.method(
            #parse,
            [args],
          ),
        ),
        returnValueForMissingStub: _FakeArgResults_2(
          this,
          Invocation.method(
            #parse,
            [args],
          ),
        ),
      ) as _i4.ArgResults);

  @override
  _i6.Future<void> runCommand(_i4.ArgResults? topLevelResults) =>
      (super.noSuchMethod(
        Invocation.method(
          #runCommand,
          [topLevelResults],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ZipFileEncoder].
///
/// See the documentation for Mockito's code generation for more information.
class MockZipFileEncoder extends _i1.Mock implements _i9.ZipFileEncoder {
  @override
  String get zipPath => (super.noSuchMethod(
        Invocation.getter(#zipPath),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#zipPath),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#zipPath),
        ),
      ) as String);

  @override
  set zipPath(String? _zipPath) => super.noSuchMethod(
        Invocation.setter(
          #zipPath,
          _zipPath,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void zipDirectory(
    _i10.Directory? dir, {
    String? filename,
    int? level,
    bool? followLinks = true,
    void Function(double)? onProgress,
    DateTime? modified,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #zipDirectory,
          [dir],
          {
            #filename: filename,
            #level: level,
            #followLinks: followLinks,
            #onProgress: onProgress,
            #modified: modified,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> zipDirectoryAsync(
    _i10.Directory? dir, {
    String? filename,
    int? level,
    bool? followLinks = true,
    void Function(double)? onProgress,
    DateTime? modified,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zipDirectoryAsync,
          [dir],
          {
            #filename: filename,
            #level: level,
            #followLinks: followLinks,
            #onProgress: onProgress,
            #modified: modified,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void open(String? zipPath) => super.noSuchMethod(
        Invocation.method(
          #open,
          [zipPath],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void create(
    String? zipPath, {
    int? level,
    DateTime? modified,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #create,
          [zipPath],
          {
            #level: level,
            #modified: modified,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> addDirectory(
    _i10.Directory? dir, {
    bool? includeDirName = true,
    int? level,
    bool? followLinks = true,
    void Function(double)? onProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDirectory,
          [dir],
          {
            #includeDirName: includeDirName,
            #level: level,
            #followLinks: followLinks,
            #onProgress: onProgress,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addFile(
    _i10.File? file, [
    String? filename,
    int? level = 1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFile,
          [
            file,
            filename,
            level,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addArchiveFile(_i11.ArchiveFile? file) => super.noSuchMethod(
        Invocation.method(
          #addArchiveFile,
          [file],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
