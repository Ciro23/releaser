// Mocks generated by Mockito 5.4.4 from annotations
// in releaser/test/router/add_instruction_command_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i7;

import 'package:archive/src/archive_file.dart' as _i8;
import 'package:archive/src/io/zip_file_encoder.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:releaser/software/software.dart' as _i2;
import 'package:releaser/software/software_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSoftware_0 extends _i1.SmartFake implements _i2.Software {
  _FakeSoftware_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SoftwareRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoftwareRepository<T> extends _i1.Mock
    implements _i3.SoftwareRepository<T> {
  @override
  _i4.Future<_i2.Software> save(_i2.Software? software) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [software],
        ),
        returnValue: _i4.Future<_i2.Software>.value(_FakeSoftware_0(
          this,
          Invocation.method(
            #save,
            [software],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Software>.value(_FakeSoftware_0(
          this,
          Invocation.method(
            #save,
            [software],
          ),
        )),
      ) as _i4.Future<_i2.Software>);

  @override
  _i4.Future<List<_i2.Software>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Software>>.value(<_i2.Software>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Software>>.value(<_i2.Software>[]),
      ) as _i4.Future<List<_i2.Software>>);

  @override
  _i4.Future<_i2.Software?> findByName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #findByName,
          [name],
        ),
        returnValue: _i4.Future<_i2.Software?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.Software?>.value(),
      ) as _i4.Future<_i2.Software?>);
}

/// A class which mocks [ZipFileEncoder].
///
/// See the documentation for Mockito's code generation for more information.
class MockZipFileEncoder extends _i1.Mock implements _i5.ZipFileEncoder {
  @override
  String get zipPath => (super.noSuchMethod(
        Invocation.getter(#zipPath),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#zipPath),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#zipPath),
        ),
      ) as String);

  @override
  set zipPath(String? _zipPath) => super.noSuchMethod(
        Invocation.setter(
          #zipPath,
          _zipPath,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void zipDirectory(
    _i7.Directory? dir, {
    String? filename,
    int? level,
    bool? followLinks = true,
    void Function(double)? onProgress,
    DateTime? modified,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #zipDirectory,
          [dir],
          {
            #filename: filename,
            #level: level,
            #followLinks: followLinks,
            #onProgress: onProgress,
            #modified: modified,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> zipDirectoryAsync(
    _i7.Directory? dir, {
    String? filename,
    int? level,
    bool? followLinks = true,
    void Function(double)? onProgress,
    DateTime? modified,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zipDirectoryAsync,
          [dir],
          {
            #filename: filename,
            #level: level,
            #followLinks: followLinks,
            #onProgress: onProgress,
            #modified: modified,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void open(String? zipPath) => super.noSuchMethod(
        Invocation.method(
          #open,
          [zipPath],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void create(
    String? zipPath, {
    int? level,
    DateTime? modified,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #create,
          [zipPath],
          {
            #level: level,
            #modified: modified,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> addDirectory(
    _i7.Directory? dir, {
    bool? includeDirName = true,
    int? level,
    bool? followLinks = true,
    void Function(double)? onProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDirectory,
          [dir],
          {
            #includeDirName: includeDirName,
            #level: level,
            #followLinks: followLinks,
            #onProgress: onProgress,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addFile(
    _i7.File? file, [
    String? filename,
    int? level = 1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFile,
          [
            file,
            filename,
            level,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addArchiveFile(_i8.ArchiveFile? file) => super.noSuchMethod(
        Invocation.method(
          #addArchiveFile,
          [file],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
